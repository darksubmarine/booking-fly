// Code generated by Torpedo DO NOT EDIT.

// Package memory implements in memory output
package memory

import (
	"github.com/darksubmarine/booking-fly/domain/entities/user"
	"github.com/darksubmarine/torpedo-lib-go/entity"
)

// EntityDMOMemory Data Mapper Object to the memory output
type EntityDMOMemory struct {
	*user.EntityDMO

	Id_      string `json:"id"`
	Created_ int64  `json:"created"`
	Updated_ int64  `json:"updated"`

	Name_     string `json:"name,omitempty" `
	Email_    string `json:"email,omitempty" `
	Password_ string `json:"password,omitempty" torpedo.field:"encrypted"`
	Plan_     string `json:"plan,omitempty" `
	Miles_    int64  `json:"miles,omitempty" `

	DMO
}

// NewEntityDMOMemory constructor function
func NewEntityDMOMemory(key []byte) *EntityDMOMemory {
	dmo := new(EntityDMOMemory)
	dmo.EntityDMO = user.NewEntityDMO(key)
	dmo.DMO.EntityDMO = dmo.EntityDMO
	return dmo
}

// NewEntityDMOMemoryFrom constructor function from user.UserEntity
func NewEntityDMOMemoryFrom(ety *user.UserEntity, key []byte) (*EntityDMOMemory, error) {
	d := NewEntityDMOMemory(key)
	if err := entity.To(ety, d); err != nil {
		return nil, err
	}

	return d, nil
}

// Id getter method
func (dmo *EntityDMOMemory) Id() string { return dmo.Id_ }

// Created getter method
func (dmo *EntityDMOMemory) Created() int64 { return dmo.Created_ }

// Updated getter method
func (dmo *EntityDMOMemory) Updated() int64 { return dmo.Updated_ }

// Name getter method
func (dmo *EntityDMOMemory) Name() string { return dmo.Name_ }

// Email getter method
func (dmo *EntityDMOMemory) Email() string { return dmo.Email_ }

// Password getter method
func (dmo *EntityDMOMemory) Password() (string, error) {
	return dmo.DecryptString(dmo.Password_)
}

// Plan getter method
func (dmo *EntityDMOMemory) Plan() string { return dmo.Plan_ }

// Miles getter method
func (dmo *EntityDMOMemory) Miles() int64 { return dmo.Miles_ }

// ToEntity returns a user.UserEntity from the DMO object
func (dmo *EntityDMOMemory) ToEntity() (*user.UserEntity, error) {
	ety := user.New()
	if err := entity.From(dmo, ety); err != nil {
		return nil, err
	}
	return ety, nil
}

// HydrateFromEntity populates the DMO fields from the user.UserEntity
func (dmo *EntityDMOMemory) HydrateFromEntity(ety *user.UserEntity) error {
	return entity.To(ety, dmo)
}
