// Code generated by TORPEDO DO NOT EDIT.

// Package gin input
package gin

import (
	"github.com/darksubmarine/booking-fly/domain/entities/user"
	"github.com/darksubmarine/torpedo-lib-go/entity"

	tripHTTP "github.com/darksubmarine/booking-fly/domain/entities/trip/inputs/http/gin"
)

var optionalFields = []string{}

func init() {
	mt := user.FieldsMetadata()
	for fName, v := range mt {
		if v.IsOptional() {
			fieldName := v.DtoHttpName()
			if fieldName == "" {
				fieldName = entity.FieldNameToCode(fName)
			}
			optionalFields = append(optionalFields, fieldName)
		}
	}
}

// PartialDTO partial data transfer object schema
type PartialDTO struct {
	ReadOnlyDTO
	WriteableDTO
	CustomDTO
} //@name user.PartialDTO

// UpdatableDTO accept only the writable fields (not read only)
type UpdatableDTO struct {
	WriteableDTO
	CustomDTO
} //@name user.UpdatableDTO

// MetadataDTO the metadata fields like id, create and update.
type MetadataDTO struct {
	Id_      *string `json:"id"`
	Created_ *int64  `json:"created"`
	Updated_ *int64  `json:"updated"`
} //@name user.MetadataDTO

// ReadOnlyDTO defines the read only fields
type ReadOnlyDTO struct {
} //@name user.ReadOnlyDTO

// WriteableDTO defines the writable fields
type WriteableDTO struct {
	Name_     *string `json:"name,omitempty"`
	Email_    *string `json:"email,omitempty"`
	Password_ *string `json:"password,omitempty"`
	Plan_     *string `json:"plan,omitempty"`
	Miles_    *int64  `json:"miles,omitempty"`
} //@name user.WriteableDTO

type RelationshipsDTO struct {
	Trips_ []tripHTTP.FullDTO `json:"trips,omitempty"`
} //@name user.RelationshipsDTO

// FullDTO adds the framework fields id, created and updated to complete the schema.
// Implements user.IEntityDTO
type FullDTO struct {
	MetadataDTO
	ReadOnlyDTO
	WriteableDTO
	RelationshipsDTO
	CustomDTO
} //@name user.FullDTO

// NewFullDTO full DTO constructor
func NewFullDTO() *FullDTO {
	return new(FullDTO)
}

// Id getter method
func (dto *FullDTO) Id() string { return *dto.Id_ }

// Created getter method
func (dto *FullDTO) Created() int64 { return *dto.Created_ }

// Updated getter method
func (dto *FullDTO) Updated() int64 { return *dto.Updated_ }

// Name getter method
func (dto *FullDTO) Name() string { return *dto.Name_ }

// Email getter method
func (dto *FullDTO) Email() string { return *dto.Email_ }

// Password getter method
func (dto *FullDTO) Password() string { return *dto.Password_ }

// Plan getter method
func (dto *FullDTO) Plan() string { return *dto.Plan_ }

// Miles getter method
func (dto *FullDTO) Miles() int64 { return *dto.Miles_ }

func FromEntity(ety *user.UserEntity) (*FullDTO, error) {
	dto := NewFullDTO()
	if err := entity.To(ety, dto); err != nil {
		return nil, err
	}

	if err := convertLoadedTrip(ety, dto); err != nil {
		return nil, err
	}

	return dto, nil
}

func convertLoadedTrip(ety *user.UserEntity, dto *FullDTO) error {

	trips := make([]tripHTTP.FullDTO, len(ety.Trips()))
	for i, oETY := range ety.Trips() {
		if oDTO, err := tripHTTP.FromEntity(oETY); err == nil {
			trips[i] = *oDTO
		} else {
			return err
		}
	}

	dto.Trips_ = trips
	return nil
}
