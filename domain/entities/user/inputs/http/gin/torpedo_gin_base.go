// Code generated by TORPEDO DO NOT EDIT.

// Package gin input
package gin

import (
	"errors"
	"fmt"
	"github.com/darksubmarine/booking-fly/domain/entities/user"
	"github.com/darksubmarine/torpedo-lib-go"
	"github.com/darksubmarine/torpedo-lib-go/api"
	"github.com/darksubmarine/torpedo-lib-go/entity"
	"github.com/darksubmarine/torpedo-lib-go/http/gin_utils"
	"github.com/darksubmarine/torpedo-lib-go/log"
	"github.com/darksubmarine/torpedo-lib-go/object"
	"github.com/darksubmarine/torpedo-lib-go/tql"
	"github.com/gin-gonic/gin"
	"net/http"
)

// inputGinBase struct to bind Gin Framework with the service CRUD operations
type inputGinBase struct {
	srv    user.IService
	logger log.ILogger
}

// newInputGinBase constructor function
func newInputGinBase(service user.IService, logger log.ILogger) *inputGinBase {
	return &inputGinBase{srv: service, logger: logger}
}

// register adds endpoints to Gin Router.
//
// CRUD endpoints:
//   - Create: [POST]   /users
//   - Read:   [GET]    /users/:id
//   - Update: [PUT]    /users/:id
//   - Delete: [DELETE] /users/:id
//
// Torpedo reserved endpoints:
//   - TQL: [POST] /users/query (Torpedo Query Language: https://darksubmarine.com/docs/torpedo/tql.html)
func (h *inputGinBase) register(g gin.IRouter, withMiddlewares ...*gin_utils.TorpedoMiddleware) {

	var middlewares *gin_utils.CRUDQMiddleware
	if len(withMiddlewares) > 0 {
		middlewares = gin_utils.ToCRUDQMiddlewares(withMiddlewares...)
	}

	if middlewares == nil {

		g.POST("/users/query", h.TQL) // used for TQL

		g.POST("/users", h.Create)
		g.GET("/users/:id", h.Read)
		g.PUT("/users/:id", h.Update)
		g.DELETE("/users/:id", h.Delete)

		//Relationship endpoints

		return
	}

	if middlewares.HasQuery() {
		g.POST("/users/query", append(middlewares.Query, h.TQL)...)
	} else {
		g.POST("/users/query", h.TQL)
	}

	if middlewares.HasCreate() {
		g.POST("/users", append(middlewares.Create, h.Create)...)

	} else {
		g.POST("/users", h.Create)

	}

	if middlewares.HasRead() {
		g.GET("/users/:id", append(middlewares.Read, h.Read)...)

	} else {
		g.GET("/users/:id", h.Read)

	}

	if middlewares.HasUpdate() {
		g.PUT("/users/:id", append(middlewares.Update, h.Update)...)

	} else {
		g.PUT("/users/:id", h.Update)

	}

	if middlewares.HasDelete() {
		g.DELETE("/users/:id", append(middlewares.Delete, h.Delete)...)

	} else {
		g.DELETE("/users/:id", h.Delete)

	}
}

// TQL Torpedo Query Language input controller that calls the service Query method
func (h *inputGinBase) TQL(c *gin.Context) {
	var query tql.Query
	if err := c.ShouldBindJSON(&query); err != nil {
		c.JSON(http.StatusBadRequest, api.ErrorBindingJSON(err))
		return
	}

	if list, err := h.srv.Query(&query); err != nil {
		if errors.Is(err, tql.ErrInvalidFieldName) || errors.Is(err, tql.ErrInvalidSortFieldNotProjectionMember) {
			c.JSON(http.StatusBadRequest, api.ErrorEntityQueryByUser(err))
		} else {
			c.JSON(http.StatusInternalServerError, api.ErrorEntityQuery(err))
		}
		return
	} else {
		c.JSON(http.StatusOK, list)
	}
}

// Create input controller that calls the service create function
// @Summary create a user
// @Schemes http https
// @Description creates an entity UserEntity
// @Tags users
// @Accept json
// @Produce json
// @Param user body PartialDTO true "The user system"
// @Success 200 {object} FullDTO
// @Failure 400 {object} api.Error
// @Failure 500 {object} api.Error
// @Router /users [post]
func (h *inputGinBase) Create(c *gin.Context) {
	var pdto PartialDTO
	if err := c.ShouldBindJSON(&pdto); err != nil {
		c.JSON(http.StatusBadRequest, api.NewError("4001", err))
		return
	}

	h.create(pdto, c)
}

// Update input controller that calls the service update function
// @Summary update a user
// @Schemes http https
// @Description updates an entity UserEntity
// @Tags users
// @Accept json
// @Produce json
// @Param id path string true "user Id"
// @Param user body UpdatableDTO true "The user system"
// @Success 200 {object} FullDTO
// @Failure 400 {object} api.Error
// @Failure 500 {object} api.Error
// @Router /users/{id} [put]
func (h *inputGinBase) Update(c *gin.Context) {
	var pdto UpdatableDTO
	if err := c.ShouldBindJSON(&pdto); err != nil {
		c.JSON(http.StatusBadRequest, api.NewError("4001", err))
		return
	}

	id := c.Param("id")
	h.update(id, pdto, c)
}

// Read input controller that calls the service read function
// @Summary get a user
// @Schemes http https
// @Description get an entity UserEntity by Id
// @Tags users
// @Accept json
// @Produce json
// @Param id path string true "user Id"
// @Success 200 {object} FullDTO
// @Failure 404 {object} api.Error
// @Failure 500 {object} api.Error
// @Router /users/{id} [get]
func (h *inputGinBase) Read(c *gin.Context) {

	ctx, _ := gin_utils.GetDataContext(c)
	id := c.Param("id")
	ety, err := h.srv.Read(ctx, id)
	if err != nil {
		if errors.Is(err, torpedo_lib.ErrIdNotFound) {
			c.JSON(http.StatusNotFound, api.NewError("4004", err))
		} else {
			c.JSON(http.StatusInternalServerError, api.NewError("5003", err))
		}
		return
	}

	if ety == nil {
		c.JSON(http.StatusNotFound, api.NewError("4004", torpedo_lib.ErrIdNotFound))
		return
	}

	if dto, err := FromEntity(ety); err != nil {
		c.JSON(http.StatusInternalServerError, api.NewError("5002", err))
	} else {
		c.JSON(http.StatusOK, dto)
	}
}

// Delete input controller that calls the service delete function
// @Summary remove a user
// @Schemes http https
// @Description remove an entity UserEntity by Id
// @Tags users
// @Accept json
// @Produce json
// @Param id path string true "user Id"
// @Success 204
// @Failure 404 {object} api.Error
// @Failure 500 {object} api.Error
// @Router /users/{id} [delete]
func (h *inputGinBase) Delete(c *gin.Context) {

	id := c.Param("id")
	h.delete(id, c)
}

// --- Private methods ---
func (h *inputGinBase) create(pdto PartialDTO, c *gin.Context) {
	if ok, err := object.IsComplete(pdto, optionalFields...); !ok {
		if err != nil {
			c.JSON(http.StatusBadRequest, api.ErrorPartialEntityIncomplete(err))
		} else {
			c.JSON(http.StatusBadRequest, api.ErrorPartialEntityIncomplete(fmt.Errorf("all fields are required")))
		}
		return
	}

	ety := user.New()
	if err := entity.From(&pdto, ety); err != nil {
		c.JSON(http.StatusBadRequest, api.ErrorBuildingEntityFromDTO(err))
		return
	} else {
		ctx, _ := gin_utils.GetDataContext(c)
		if created, err := h.srv.Create(ctx, ety); err != nil {
			c.JSON(http.StatusInternalServerError, api.ErrorEntityCreation(err))
			return
		} else {
			returnDto := NewFullDTO()
			if err := entity.To(created, returnDto); err != nil {
				c.JSON(http.StatusInternalServerError, api.ErrorEntityCreation(err)) // TODO replace the error
			}

			c.JSON(http.StatusOK, returnDto)
			return
		}
	}
}

func (h *inputGinBase) update(id string, pdto UpdatableDTO, c *gin.Context) {
	if ok, err := object.IsComplete(pdto, optionalFields...); !ok {
		if err != nil {
			c.JSON(http.StatusBadRequest, api.ErrorPartialEntityIncomplete(err))
		} else {
			c.JSON(http.StatusBadRequest, api.ErrorPartialEntityIncomplete(fmt.Errorf("all fields are required")))
		}
		return
	}

	ety := user.New()
	if err := entity.From(&pdto, ety); err != nil {
		c.JSON(http.StatusBadRequest, api.ErrorBuildingEntityFromDTO(err))
		return
	} else {
		ety.SetId(id)
		ctx, _ := gin_utils.GetDataContext(c)
		if updated, err := h.srv.Update(ctx, ety); err != nil {
			if errors.Is(err, torpedo_lib.ErrIdNotFound) {
				c.JSON(http.StatusNotFound, api.ErrorNotFound(err))
			} else {
				c.JSON(http.StatusInternalServerError, api.ErrorEntityUpdate(err))
			}
			return
		} else {
			returnDto := NewFullDTO()
			if err := entity.To(updated, returnDto); err != nil {
				c.JSON(http.StatusInternalServerError, api.ErrorEntityUpdate(err))
			}

			c.JSON(http.StatusOK, returnDto)
			return
		}
	}
}

func (h *inputGinBase) delete(id string, c *gin.Context) {
	ctx, _ := gin_utils.GetDataContext(c)
	if err := h.srv.Delete(ctx, id); err != nil {
		if errors.Is(err, torpedo_lib.ErrIdNotFound) {
			c.JSON(http.StatusNotFound, api.ErrorNotFound(err))
		} else {
			c.JSON(http.StatusInternalServerError, api.ErrorEntityRemove(err))
		}
		return
	}

	c.JSON(http.StatusNoContent, nil)
}
