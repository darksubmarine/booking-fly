// Code generated by Torpedo DO NOT EDIT.

// Package mocks the service base user.ServiceBase for testing purpose
package mocks

import (
	"github.com/darksubmarine/booking-fly/domain/entities/user"
	"github.com/darksubmarine/torpedo-lib-go/context"
	"github.com/darksubmarine/torpedo-lib-go/tql"
)

type ServiceBase struct {
	Create_ func(ctx context.IDataMap, ety *user.UserEntity) (*user.UserEntity, error)
	Read_   func(ctx context.IDataMap, id string) (*user.UserEntity, error)
	Update_ func(ctx context.IDataMap, ety *user.UserEntity) (*user.UserEntity, error)
	Delete_ func(ctx context.IDataMap, id string) error
	Query_  func(q *tql.Query) (*tql.Result, error)
}

// Create given a new entity this one is populated with ID and creation timestamp and finally saved into the repository
func (s *ServiceBase) Create(ctx context.IDataMap, ety *user.UserEntity) (*user.UserEntity, error) {
	return s.Create_(ctx, ety)
}

// Read returns a pointer to UserEntity given its id
func (s *ServiceBase) Read(ctx context.IDataMap, id string) (*user.UserEntity, error) {
	return s.Read_(ctx, id)
}

// Update returns a pointer to UserEntity after update it
func (s *ServiceBase) Update(ctx context.IDataMap, ety *user.UserEntity) (*user.UserEntity, error) {
	return s.Update_(ctx, ety)
}

// Delete removes the entity given its id
func (s *ServiceBase) Delete(ctx context.IDataMap, id string) error {
	return s.Delete_(ctx, id)
}

// Query executes the given query (TQL) and returns the query result
func (s *ServiceBase) Query(q *tql.Query) (*tql.Result, error) {
	return s.Query_(q)
}
