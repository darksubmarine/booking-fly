// Code generated by Torpedo DO NOT EDIT.

// Package trip The user fly trip reservations
package trip

import (
	"bytes"
	"fmt"
	"github.com/darksubmarine/torpedo-lib-go/entity"
	"github.com/darksubmarine/torpedo-lib-go/trn"
	"github.com/darksubmarine/torpedo-lib-go/validator"
)

const (
	fieldId        = "id"
	fieldCreated   = "created"
	fieldUpdated   = "updated"
	fieldDeparture = "departure"
	fieldArrival   = "arrival"
	fieldMiles     = "miles"
	fieldFrom      = "from"
	fieldTo        = "to"
	fieldUserId    = "userId"
)

var _fieldsMap entity.FieldMap
var _fieldsMetadata map[string]*entity.FieldMetadata

func init() {
	instance := New()
	_fieldsMap = entity.ToFieldMap(instance)
	_fieldsMetadata = entity.FieldsMetadata(instance)
}

// FieldsMetadata returns the trip Entity fields metadata.
func FieldsMetadata() map[string]*entity.FieldMetadata { return _fieldsMetadata }

type entityBase struct {
	id      string
	created int64
	updated int64

	// departure The trip departure airport
	departure string

	// arrival The trip arrival airport
	arrival string

	// miles The trip miles
	miles int64

	// from The trip from date
	from int64

	// to The trip to date
	to int64

	// userId The userId relationship
	userId string

	validators map[string]validator.IValidator
}

func newEntityBase() *entityBase {
	return new(entityBase).init()
}

func (e *entityBase) init() *entityBase {
	e.validators = map[string]validator.IValidator{}

	return e
}

func (e *entityBase) FieldsMetadata() map[string]*entity.FieldMetadata { return _fieldsMetadata }

func (e *entityBase) TRN() *trn.TRN { return entity.TRN(Name, e.id) }

func (e *entityBase) Id() string     { return e.id }
func (e *entityBase) Created() int64 { return e.created }
func (e *entityBase) Updated() int64 { return e.updated }

func (e *entityBase) SetId(id string)          { e.id = id }
func (e *entityBase) SetCreated(created int64) { e.created = created }
func (e *entityBase) SetUpdated(updated int64) { e.updated = updated }

// Departure The trip departure airport
func (e *entityBase) Departure() string { return e.departure }

// SetDeparture The trip departure airport
func (e *entityBase) SetDeparture(departure string) error {

	e.departure = departure
	return nil
}

// Arrival The trip arrival airport
func (e *entityBase) Arrival() string { return e.arrival }

// SetArrival The trip arrival airport
func (e *entityBase) SetArrival(arrival string) error {

	e.arrival = arrival
	return nil
}

// Miles The trip miles
func (e *entityBase) Miles() int64 { return e.miles }

// SetMiles The trip miles
func (e *entityBase) SetMiles(miles int64) error {

	e.miles = miles
	return nil
}

// From The trip from date
func (e *entityBase) From() int64 { return e.from }

// SetFrom The trip from date
func (e *entityBase) SetFrom(from int64) error {

	e.from = from
	return nil
}

// To The trip to date
func (e *entityBase) To() int64 { return e.to }

// SetTo The trip to date
func (e *entityBase) SetTo(to int64) error {

	e.to = to
	return nil
}

// UserId The userId relationship
func (e *entityBase) UserId() string { return e.userId }

// SetUserId The userId relationship
func (e *entityBase) SetUserId(userId string) error {

	e.userId = userId
	return nil
}

// String returns the string representation of the entityBase
func (e *entityBase) String() string {
	buf := bytes.NewBufferString("")
	buf.WriteString("trip.entityBase{ ")
	buf.WriteString(fmt.Sprintf("%s=%v ", "id", e.id))
	buf.WriteString(fmt.Sprintf("%s=%v ", "created", e.created))
	buf.WriteString(fmt.Sprintf("%s=%v ", "updated", e.updated))
	buf.WriteString(fmt.Sprintf("%s=%v ", "departure", e.departure))
	buf.WriteString(fmt.Sprintf("%s=%v ", "arrival", e.arrival))
	buf.WriteString(fmt.Sprintf("%s=%v ", "miles", e.miles))
	buf.WriteString(fmt.Sprintf("%s=%v ", "from", e.from))
	buf.WriteString(fmt.Sprintf("%s=%v ", "to", e.to))
	buf.WriteString(fmt.Sprintf("%s=%v ", "userId", e.userId))
	buf.WriteString("}")
	return buf.String()
}
