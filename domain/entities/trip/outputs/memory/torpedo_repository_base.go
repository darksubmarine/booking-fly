// Code generated by TORPEDO DO NOT EDIT.

// Package memory implements in memory output
package memory

import (
	"github.com/darksubmarine/booking-fly/domain/entities/trip"
	torpedo_lib "github.com/darksubmarine/torpedo-lib-go"
	"github.com/darksubmarine/torpedo-lib-go/entity"
	"github.com/darksubmarine/torpedo-lib-go/tql"
)

// memoryRepositoryBase In Memory repository implements trip.IRepositoryBase
type memoryRepositoryBase struct {
	data map[string]*EntityDMOMemory
	ckey []byte
}

// newMemoryRepositoryBase repository constructor
func newMemoryRepositoryBase(cryptoKey []byte) *memoryRepositoryBase {
	return &memoryRepositoryBase{data: map[string]*EntityDMOMemory{}, ckey: cryptoKey}
}

// Save add the entity into the memory
func (r *memoryRepositoryBase) Save(entity *trip.TripEntity) error {
	dmo, err := NewEntityDMOMemoryFrom(entity, r.ckey)
	if err != nil {
		return err
	}
	r.data[entity.Id()] = dmo
	return nil
}

// FetchByID fetch entity by ID
func (r *memoryRepositoryBase) FetchByID(id string) (*trip.TripEntity, error) {
	if dmo, exists := r.data[id]; exists {
		ety := trip.New()
		if err := entity.From(dmo, ety); err != nil {
			return nil, err
		}
		return ety, nil

	}

	return nil, torpedo_lib.ErrIdNotFound
}

// Update updates the stored entity into the memory (adds if it not exists)
func (r *memoryRepositoryBase) Update(entity *trip.TripEntity) error {
	return r.Save(entity)
}

// DeleteByID removes the entity by ID
func (r *memoryRepositoryBase) DeleteByID(id string) error {
	if _, exists := r.data[id]; exists {
		delete(r.data, id)
		return nil
	}

	return torpedo_lib.ErrIdNotFound
}

// DeleteByUser removes the entity by userId
func (r *memoryRepositoryBase) DeleteByUser(userId string) error {
	for k, v := range r.data {
		if v.UserId_ == userId {
			delete(r.data, k)
		}
	}
	return nil
}

// Query TQL (Torpedo Query Language) is not supported on this repository
func (r *memoryRepositoryBase) Query(q *tql.Query, metadata map[string]string) ([]*trip.TripEntity, error) {
	return nil, tql.ErrTQLNotSupported
}
