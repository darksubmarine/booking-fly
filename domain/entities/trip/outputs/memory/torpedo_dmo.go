// Code generated by Torpedo DO NOT EDIT.

// Package memory implements in memory output
package memory

import (
	"github.com/darksubmarine/booking-fly/domain/entities/trip"
	"github.com/darksubmarine/torpedo-lib-go/entity"
)

// EntityDMOMemory Data Mapper Object to the memory output
type EntityDMOMemory struct {
	*trip.EntityDMO

	Id_      string `json:"id"`
	Created_ int64  `json:"created"`
	Updated_ int64  `json:"updated"`

	Departure_ string `json:"departure,omitempty" `
	Arrival_   string `json:"arrival,omitempty" `
	Miles_     int64  `json:"miles,omitempty" `
	From_      int64  `json:"from,omitempty" `
	To_        int64  `json:"to,omitempty" `
	UserId_    string `json:"userId,omitempty" `

	DMO
}

// NewEntityDMOMemory constructor function
func NewEntityDMOMemory(key []byte) *EntityDMOMemory {
	dmo := new(EntityDMOMemory)
	dmo.EntityDMO = trip.NewEntityDMO(key)
	dmo.DMO.EntityDMO = dmo.EntityDMO
	return dmo
}

// NewEntityDMOMemoryFrom constructor function from trip.TripEntity
func NewEntityDMOMemoryFrom(ety *trip.TripEntity, key []byte) (*EntityDMOMemory, error) {
	d := NewEntityDMOMemory(key)
	if err := entity.To(ety, d); err != nil {
		return nil, err
	}

	return d, nil
}

// Id getter method
func (dmo *EntityDMOMemory) Id() string { return dmo.Id_ }

// Created getter method
func (dmo *EntityDMOMemory) Created() int64 { return dmo.Created_ }

// Updated getter method
func (dmo *EntityDMOMemory) Updated() int64 { return dmo.Updated_ }

// Departure getter method
func (dmo *EntityDMOMemory) Departure() string { return dmo.Departure_ }

// Arrival getter method
func (dmo *EntityDMOMemory) Arrival() string { return dmo.Arrival_ }

// Miles getter method
func (dmo *EntityDMOMemory) Miles() int64 { return dmo.Miles_ }

// From getter method
func (dmo *EntityDMOMemory) From() int64 { return dmo.From_ }

// To getter method
func (dmo *EntityDMOMemory) To() int64 { return dmo.To_ }

// UserId getter method
func (dmo *EntityDMOMemory) UserId() string { return dmo.UserId_ }

// ToEntity returns a trip.TripEntity from the DMO object
func (dmo *EntityDMOMemory) ToEntity() (*trip.TripEntity, error) {
	ety := trip.New()
	if err := entity.From(dmo, ety); err != nil {
		return nil, err
	}
	return ety, nil
}

// HydrateFromEntity populates the DMO fields from the trip.TripEntity
func (dmo *EntityDMOMemory) HydrateFromEntity(ety *trip.TripEntity) error {
	return entity.To(ety, dmo)
}
