// Code generated by TORPEDO DO NOT EDIT.

// Package mongodb is an output adapter to store entities in MongoDB
package mongodb

import (
	"github.com/darksubmarine/booking-fly/domain/entities/trip"
	"github.com/darksubmarine/torpedo-lib-go/entity"
	"github.com/darksubmarine/torpedo-lib-go/storage/mongodb_utils"
	"go.mongodb.org/mongo-driver/bson"
)

// EntityDMOMongoDB Data Mapper Object (DMO) to store entity into MongoDB
type EntityDMOMongoDB struct {
	*trip.EntityDMO `bson:"-"`

	Id_      string `bson:"_id"`
	Created_ int64  `bson:"created"`
	Updated_ int64  `bson:"updated"`

	Departure_ string `bson:"departure" `
	Arrival_   string `bson:"arrival" `
	Miles_     int64  `bson:"miles" `
	From_      int64  `bson:"from" `
	To_        int64  `bson:"to" `
	UserId_    string `bson:"userId" `

	DMO `bson:"inline"`
}

// NewEntityDMOMongoDB constructor function
//
//	 params:
//			- key []byte is the encryption key for the encrypted fields
func NewEntityDMOMongoDB(key []byte) *EntityDMOMongoDB {
	dmo := new(EntityDMOMongoDB)
	dmo.EntityDMO = trip.NewEntityDMO(key)
	dmo.DMO.EntityDMO = dmo.EntityDMO // TODO review this line. It is to support encryption at custom DMO
	return dmo
}

// NewEntityDMOMongoDBFrom DMO constructor function from a given trip.TripEntity.
//
//	 params:
//			- ety: *trip.TripEntity entity from the DMO will be created
//			- key: []byte is the encryption key for the encrypted fields
func NewEntityDMOMongoDBFrom(ety *trip.TripEntity, key []byte) (*EntityDMOMongoDB, error) {
	d := NewEntityDMOMongoDB(key)
	if err := entity.To(ety, d); err != nil {
		return nil, err
	}
	return d, nil
}

// Id getter method
func (dmo *EntityDMOMongoDB) Id() string { return dmo.Id_ }

// Created getter method
func (dmo *EntityDMOMongoDB) Created() int64 { return dmo.Created_ }

// Updated getter method
func (dmo *EntityDMOMongoDB) Updated() int64 { return dmo.Updated_ }

// Departure getter method
func (dmo *EntityDMOMongoDB) Departure() string { return dmo.Departure_ }

// Arrival getter method
func (dmo *EntityDMOMongoDB) Arrival() string { return dmo.Arrival_ }

// Miles getter method
func (dmo *EntityDMOMongoDB) Miles() int64 { return dmo.Miles_ }

// From getter method
func (dmo *EntityDMOMongoDB) From() int64 { return dmo.From_ }

// To getter method
func (dmo *EntityDMOMongoDB) To() int64 { return dmo.To_ }

// UserId getter method
func (dmo *EntityDMOMongoDB) UserId() string { return dmo.UserId_ }

// ToEntity returns a trip.TripEntity from the DMO object
func (dmo *EntityDMOMongoDB) ToEntity() (*trip.TripEntity, error) {
	ety := trip.New()
	if err := entity.From(dmo, ety); err != nil {
		return nil, err
	}
	return ety, nil
}

// HydrateFromEntity populates the DMO fields from the trip.TripEntity
func (dmo *EntityDMOMongoDB) HydrateFromEntity(ety *trip.TripEntity) error {
	return entity.To(ety, dmo)
}

// updateDocument mapper function from DMO to bson.D to update document into the mongoDB collection
func (dmo *EntityDMOMongoDB) updateDocument(metadata map[string]*entity.FieldMetadata) bson.D {
	bsonD := mongodb_utils.ToBSONDocument(dmo, metadata, "Id_", "Created_")
	return bson.D{{"$set", bsonD}}
}
