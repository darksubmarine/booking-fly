// Code generated by Torpedo DO NOT EDIT.

// Package trip The user fly trip reservations
package trip

import (
	"github.com/darksubmarine/torpedo-lib-go/context"
	"github.com/darksubmarine/torpedo-lib-go/tql"
)

// IEntityDMO interface to defines the Data Mapper Object implementation
type IEntityDMO interface {
	ToEntity() (*TripEntity, error)
	HydrateFromEntity(entity *TripEntity) error
	Id() string
	Created() int64
	Updated() int64
	Departure() string
	Arrival() string
	Miles() int64
	From() int64
	To() int64
	UserId() string
}

// IEntityDTO interface to defines the Data Transfer Object implementation
type IEntityDTO interface {
	Id() string
	Created() int64
	Updated() int64

	Departure() string
	Arrival() string
	Miles() int64
	From() int64
	To() int64
	UserId() string
}

// IRepositoryBase interface to defines the base repository implementation
type IRepositoryBase interface {
	Save(entity *TripEntity) error
	FetchByID(id string) (*TripEntity, error)
	Update(entity *TripEntity) error
	DeleteByID(id string) error

	Query(q *tql.Query, metadata map[string]string) ([]*TripEntity, error)

	DeleteByUser(userId string) error
}

// IServiceBase interface to defines the service basis implementation
type IServiceBase interface {
	IServiceBaseRel
	Create(ctx context.IDataMap, entity *TripEntity) (*TripEntity, error)
	Read(ctx context.IDataMap, id string) (*TripEntity, error)
	Update(ctx context.IDataMap, entity *TripEntity) (*TripEntity, error)
	Delete(ctx context.IDataMap, id string) error
	Query(q *tql.Query) (*tql.Result, error)
}

// IServiceBaseRel interface to defines the relationship methods
type IServiceBaseRel interface {
	BelongsToUser(userId string, items int64, page int64) ([]*TripEntity, error)
	DeleteByUser(userId string) error
}
