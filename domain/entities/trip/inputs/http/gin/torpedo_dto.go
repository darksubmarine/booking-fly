// Code generated by TORPEDO DO NOT EDIT.

// Package gin input
package gin

import (
	"github.com/darksubmarine/booking-fly/domain/entities/trip"
	"github.com/darksubmarine/torpedo-lib-go/entity"
)

var optionalFields = []string{}

func init() {
	mt := trip.FieldsMetadata()
	for fName, v := range mt {
		if v.IsOptional() {
			fieldName := v.DtoHttpName()
			if fieldName == "" {
				fieldName = entity.FieldNameToCode(fName)
			}
			optionalFields = append(optionalFields, fieldName)
		}
	}
}

// PartialDTO partial data transfer object schema
type PartialDTO struct {
	ReadOnlyDTO
	WriteableDTO
	CustomDTO
} //@name trip.PartialDTO

// UpdatableDTO accept only the writable fields (not read only)
type UpdatableDTO struct {
	WriteableDTO
	CustomDTO
} //@name trip.UpdatableDTO

// MetadataDTO the metadata fields like id, create and update.
type MetadataDTO struct {
	Id_      *string `json:"id"`
	Created_ *int64  `json:"created"`
	Updated_ *int64  `json:"updated"`
} //@name trip.MetadataDTO

// ReadOnlyDTO defines the read only fields
type ReadOnlyDTO struct {
} //@name trip.ReadOnlyDTO

// WriteableDTO defines the writable fields
type WriteableDTO struct {
	Departure_ *string `json:"departure,omitempty"`
	Arrival_   *string `json:"arrival,omitempty"`
	Miles_     *int64  `json:"miles,omitempty"`
	From_      *int64  `json:"from,omitempty"`
	To_        *int64  `json:"to,omitempty"`
	UserId_    *string `json:"userId,omitempty"`
} //@name trip.WriteableDTO

type RelationshipsDTO struct {
} //@name trip.RelationshipsDTO

// FullDTO adds the framework fields id, created and updated to complete the schema.
// Implements trip.IEntityDTO
type FullDTO struct {
	MetadataDTO
	ReadOnlyDTO
	WriteableDTO
	RelationshipsDTO
	CustomDTO
} //@name trip.FullDTO

// NewFullDTO full DTO constructor
func NewFullDTO() *FullDTO {
	return new(FullDTO)
}

// Id getter method
func (dto *FullDTO) Id() string { return *dto.Id_ }

// Created getter method
func (dto *FullDTO) Created() int64 { return *dto.Created_ }

// Updated getter method
func (dto *FullDTO) Updated() int64 { return *dto.Updated_ }

// Departure getter method
func (dto *FullDTO) Departure() string { return *dto.Departure_ }

// Arrival getter method
func (dto *FullDTO) Arrival() string { return *dto.Arrival_ }

// Miles getter method
func (dto *FullDTO) Miles() int64 { return *dto.Miles_ }

// From getter method
func (dto *FullDTO) From() int64 { return *dto.From_ }

// To getter method
func (dto *FullDTO) To() int64 { return *dto.To_ }

// UserId getter method
func (dto *FullDTO) UserId() string { return *dto.UserId_ }

func FromEntity(ety *trip.TripEntity) (*FullDTO, error) {
	dto := NewFullDTO()
	if err := entity.To(ety, dto); err != nil {
		return nil, err
	}

	return dto, nil
}
